#!/home/matveev/darcs/ttfs-mac/guile-qm
;;; -*- mode: scheme; -*- vim: set syntax=scheme:
!#
;;;
;;; This script uses both PG  and BGY3d functionality, so set the path
;;; accordingly and use the proper interpreter in the shebang line.
;;;
(set! %load-path (cons "/home/matveev/darcs/bgy3d" %load-path))
(set! %load-path (cons "/home/matveev/darcs/ttfs-mac" %load-path))

;;;
;;; FIXME: can we make PG to look up the names in a specific module to
;;; avoid importing staff that is not immediately used:
;;;
(use-modules (srfi srfi-1)
             (ice-9 pretty-print)
             ((guile paragauss)
              #:select (qm-main))
             ;;
             ;; This one is called from se_scheduling_module to
             ;; convert MPTS problem on behalf of the blocked
             ;; egiensolver.
             ;;
             ((guile scheduling)
              #:select (qm-mpts->npts))
             ;;
             ;; BGY3d functionality:
             ;;
             ((guile bgy3d)
              #:select (bgy3d-solvent
                        bgy3d-solute)))

;;;
;;; ParaGauss looks  up these names  in the top-level  environment. We
;;; bind it to a procedure later:
;;;
(define bgy3d-solvent-hook bgy3d-solvent)
(define bgy3d-solute-hook (if #f #f))   ; unspecified yet

;;;
;;; The   input  file   is  supposed   to  contain   (at   least)  two
;;; s-expressions. The  first one is the  usual PG input as  a list of
;;; forms  (namelists).  The second  one is  intended for  BGY3d.  The
;;; format and content of the latter is to be defined yet.
;;;
;;; Let it  be a list of  forms, for the moment.  The (solute "table")
;;; form  specifies   the  dictionary  to  look   up  the  force-field
;;; parameters for the sites used in QM calculation, e.g.:
;;;
;;;   ((solute "hydrogen chloride"))
;;;
;;; Note the  extra pair of  parens, it should  be a *list*  of forms.
;;; FIXME: the input would need to specify the solvent as well. So far
;;; default solvent is used.
;;;
(let* ((argv (command-line))
       (path (second argv))            ; first arg is the program name
       (opts (with-input-from-file path
               (lambda ()
                 (read)                 ; skip PG input
                 (read))))              ; return BGY3d input
       (table (second (assoc 'solute opts))))
  (pretty-print opts)
  (pretty-print table)
  ;;
  ;; PG calls bgy3d-solute-hook with solute sites (having fake force
  ;; field parameters) and a pointer to a function returning the
  ;; density. In this case we call bgy3d-run with a name of the table
  ;; read from the input prepended to the list of arguments:
  ;;
  (set! bgy3d-solute-hook
        (lambda args
          (apply bgy3d-solute table args))) ; returns potential
  (qm-main argv))
