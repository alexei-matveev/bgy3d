#!/home/matveev/darcs/ttfs-mac/guile-qm
;;; -*- mode: scheme; -*- vim: set syntax=scheme:
!#
;;;
;;; This script uses both PG  and BGY3d functionality, so set the path
;;; accordingly and use the proper interpreter in the shebang line.
;;;
(cond-expand
 ((not guile-2) (use-modules (ice-9 syncase))) ; eval-when for 1.8
 (else))                                ; nothing

(eval-when
 (eval load compile)      ; extend %load-path at compile time with 2.0
 (set! %load-path (cons "/home/matveev/darcs/bgy3d" %load-path))
 (set! %load-path (cons "/home/matveev/darcs/ttfs-mac" %load-path)))

;;;
;;; FIXME: can we make PG to look up the names in a specific module to
;;; avoid importing staff that is not immediately used:
;;;
(use-modules (srfi srfi-1)
             (ice-9 pretty-print)
             ((guile paragauss)
              #:select (qm-main))
             ;;
             ;; This one is called from se_scheduling_module to
             ;; convert MPTS problem on behalf of the blocked
             ;; egiensolver.
             ;;
             ((guile scheduling)
              #:select (qm-mpts->npts))
             ;;
             ;; BGY3d functionality:
             ;;
             ((guile bgy3d)
              #:select (solvent/solvent
                        solute/solvent
                        bgy3d-restart-destroy)))

;;;
;;; ParaGauss looks up these names in the top-level environment:
;;;
;;;   bgy3d-api-version
;;;   *input*
;;;   bgy3d-solvent
;;;   bgy3d-solute
;;;   bgy3d-restart-destroy
;;;
;;; Some of  these names are  imported from (guile bgy3d)  module (see
;;; above).  Others are defined here --- e.g. we will bind a hook to a
;;; closure over input parameters later:
;;;
;;; Functionality is  in the  flux. QM  code may want  to check  if it
;;; assumes   the   correct  API.    Change   this  when   introducing
;;; incompatible  changes. The variable  is a  3-list of  (major minor
;;; extra) integer numbers.
;;;
(define bgy3d-api-version '(2 0 0))

;;;
;;; Input can  only be defined  after processing the command  line. We
;;; make it a fluid that needs to be set when calling qm-main:
;;;
(define *input* (make-fluid *unspecified*))

;;;
;;; This hook  is called from  PG without arguments. However,  we pass
;;; model-related  input read  from the  respective file  to  the code
;;; doing the actual work:
;;;
(define bgy3d-solvent
  (lambda () (solvent/solvent (fluid-ref *input*))))

;;;
;;; PG calls  bgy3d-solute with solute sites (having  fake force field
;;; parameters), a pointer  to a function returning the  density and a
;;; pointer token for the opaque restart info object to facilitate SCF
;;; iterations:
;;;
;;;   (bgy3d-solute solute-sites
;;;                 electron-density-funptr
;;;                 restart-info-ptr)
;;;
;;; QM code  cannot and should not  be required to  provide more info.
;;; In  this case  we call  solute/solvent  with a  the (medium  model
;;; related)  input  read from  the  file  prepended  to the  list  of
;;; arguments:
;;;
(define bgy3d-solute
  (lambda args
    (apply solute/solvent (fluid-ref *input*) args))) ; -> (potential . restart)

;;;
;;; The   input  file   is  supposed   to  contain   (at   least)  two
;;; s-expressions. The  first one is the  usual PG input as  a list of
;;; forms  (namelists).  The second  one is  intended for  BGY3d.  The
;;; format and content of the latter is to be defined yet.
;;;
;;; Let it  be a list of  forms, for the moment.  The (solute "table")
;;; form  specifies   the  dictionary  to  look   up  the  force-field
;;; parameters for the sites used in QM calculation, e.g.:
;;;
;;;   ((solute "hydrogen chloride"))
;;;
;;; Note the  extra pair of  parens, it should  be a *list*  of forms.
;;; FIXME: the input would need to specify the solvent as well. So far
;;; default solvent is used.
;;;
(let* ((argv (command-line))
       (path (second argv))            ; first arg is the program name
       (opts (with-input-from-file path
               (lambda ()
                 (read)                 ; skip PG input
                 (read)))))             ; return BGY3d input
  (pretty-print (list 'ARGV: argv))
  (pretty-print (list 'OPTS: opts))
  ;;
  ;; Call  PG with arguments as  supplied in the  command line. FIXME:
  ;; Here  is the conflict.   Who should interprete the  command line?
  ;; QM or  solvent code?  As of now the command  line is reserved for
  ;; QM code:
  ;;
  (with-fluids ((*input* (if (eof-object? opts) #f opts)))
    (qm-main argv)))
